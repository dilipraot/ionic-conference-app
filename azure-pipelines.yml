# Disables CI builds entirely, then commits don't trigger a build
trigger: none

# Activates pull request trigger, so any pull request to the master trigger a build
pr:
- master

# Specifies which pool (Hosted or Self-hosted) to use for this pipeline. 
# In this case it is in the scope of the pipeline, but you can use it at the stage or job level
pool:
  vmImage: 'ubuntu-latest'

# Specific variables to use, in our case it is just one and at the pipeline level 
variables:
  chromeDriverVersion: '80.0.3987.106'

# Specifies a linear sequence of operations that make up a job
# We need only one job, so we can use the simplified structure
steps:
# Tasks are the building blocks of a pipeline
# We can choose from a catalog of tasks available by default or download from the Azure DevOps marketplace 
# In this case I chose to use 6 tasks (not mandatory) to install dependencies and build the App. 
  - task: Npm@1 # Run npm install
    displayName: 'npm install'
    inputs:
      command: install
      workingDir: '$(System.DefaultWorkingDirectory)'

  - task: Npm@1 # Run npm run build
    displayName: 'npm run build'
    inputs:
      command: custom
      customCommand: run build
      

# This task download the chromedriver binary, required for e2e tests
# In this case I installed a specific version of chromedriver to avoid errors with the version of Chrome in the hosted agent microsoft, see the troubleshooting topic.
  - script: |
      node node_modules/.bin/webdriver-manager update --versions.chrome=$(chromeDriverVersion) --gecko false --standalone false
    displayName: 'changing version of chromedriver to $(chromeDriverVersion)'


  - task: PublishTestResults@2 # Publish tests results
    displayName: 'Publishing test results'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/TESTS-*.xml'
  
  - task: PublishBuildArtifacts@1 # Publish App artifact
    inputs:
        PathtoPublish: '$(Build.BinariesDirectory)'
        TargetPath: 'www/'
        ArtifactName: 'www'
        publishLocation: 'Container'

  - bash: |
      displayName: 'Build.BinariesDirectory: $(Build.BinariesDirectory), $(Build.BinariesDirectory)/www $(System.DefaultWorkingDirectory)'

  # Moves the www folder containing bundle to the Default Working Directory path (e.g. /agent/_work/1/s)
  - bash: |
        mv $(Build.BinariesDirectory) $(System.DefaultWorkingDirectory)
    displayName: 'mv $(Build.BinariesDirectory) $(System.DefaultWorkingDirectory)'

  - bash: | # Installing cordova
      sudo npm i -g cordova
    displayName: 'npm i -g cordova@latest'

  - bash: | # Build android App using cordova
      npx ionic cordova build android --no-build --release
    displayName: 'ionic cordova build android --no-build --release'

  # Needed to solve missing dependency problem, see the troubleshooting topic
  - bash: |
      sudo apt-get install lib32z1
    displayName: 'sudo apt-get install lib32z1'

  # Signin the .apk file with the specified keystore
  - task: AndroidSigning@3
    displayName: 'android signing'
    inputs:
      apkFiles: '**/outputs/apk/release/app*.apk'
      apksignerKeystoreFile: 'sampleapp.keystore'
  # This password is placed in Variables inside the pipeline and the option to keep the value secret is checked.
      apksignerKeystorePassword: '$(password_keystore)'
      apksignerKeystoreAlias: 'sampleapp'

  - task: CopyFiles@2 # Copies all .apk files to publish
    displayName: 'copy **/outputs/apk/release/app*.apk to $(Build.BinariesDirectory)'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: '**/outputs/apk/release/app*.apk'
      CleanTargetFolder: true
      TargetFolder: '$(Build.BinariesDirectory)'
      flattenFolders: true


  - publish: '$(Build.BinariesDirectory)' # Publish artifact
    artifact: 'android-app'
    displayName: 'publish artifact'
    